// @flow
// flow-typed signature: aa279642a4cb992a390fedc5acdc896d
// flow-typed version: <<STUB>>/react-native_v0.3.0/flow_v0.65.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-native'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

type $Dimension = {| fontScale: number, height: number, scale: number, width: number |};

type $Styles = { [key: string]: mixed };
type Styles = $Styles | boolean | Array<Styles | $Styles | boolean | null | typeof undefined>;

type $MeasureLayoutCallback = (x: number, y: number, width: number, height: number, left: number, top: number) => void;

type $MeasureInWindowCallback = (left: number, top: number, width: number, height: number) => void;

declare class NativeMethodsMixin {
  static blur: () => void;
  static focus: () => void;
  static measure: (callback: $MeasureLayoutCallback) => void;
  static measureInWindow: (callback: $MeasureInWindowCallback) => void;
  static measureLayout: (relativeToNativeNode: {}, onSuccess: $MeasureLayoutCallback, onFail: () => void) => void;
  static setNativeProps: (nativeProps: {}) => void;
}

type ViewProps = {
  accessibilityLabel?: string,
  accessibilityLiveRegion?: 'assertive' | 'none' | 'polite',
  accessibilityRole?: string,
  accessible?: boolean,
  children?: React$Node,
  hitSlop?: { top: number, bottom: number, left: number, right: number },
  importantForAccessibility?: 'auto' | 'no' | 'no-hide-descendents' | 'yes',
  onLayout?: () => void,
  onMoveShouldSetResponder?: () => void,
  onMoveShouldSetResponderCapture?: () => void,
  onResponderGrant?: () => void,
  onResponderMove?: () => void,
  onResponderReject?: () => void,
  onResponderRelease?: () => void,
  onResponderTerminate?: () => void,
  onResponderTerminationRequest?: () => void,
  onStartShouldSetResponder?: () => void,
  onStartShouldSetResponderCapture?: () => void,
  pointerEvents?: 'auto' | 'box-only' | 'box-none' | 'none',
  style?: Styles,
  target?: '_blank' | '_parent' | '_self' | '_top',
  testID?: string
};

declare module 'react-native' {
  declare module.exports: {
    ActivityIndicator: $Exports<'react-native-web/dist/exports/ActivityIndicator/index'>,
    Button: $Exports<'react-native-web/dist/exports/Button/index'>,
    Clipboard: $Exports<'react-native-web/dist/exports/Clipboard/index'>,
    ColorPropType: $Exports<'react-native-web/dist/exports/ColorPropType/index'>,
    createElement(string | React$Element<*> | React$ComponentType<*>, {}): React$Node,
    Dimensions: $Exports<'react-native-web/dist/exports/Dimensions/index'>,
    I18nManager: $Exports<'react-native-web/dist/exports/I18nManager/index'>,
    Image: $Exports<'react-native-web/dist/exports/Image/index'>,
    Picker: $Exports<'react-native-web/dist/exports/Picker/index'>,
    Platform: $Exports<'react-native-web/dist/exports/Platform/index'>,
    StyleSheet: $Exports<'react-native-web/dist/exports/StyleSheet/index'>,
    Switch: $Exports<'react-native-web/dist/exports/Switch/index'>,
    Text: $Exports<'react-native-web/dist/exports/Text/index'>,
    TextInput: $Exports<'react-native-web/dist/exports/TextInput/index'>,
    TouchableHighlight: $Exports<'react-native-web/dist/exports/TouchableHighlight/index'>,
    TouchableOpacity: $Exports<'react-native-web/dist/exports/TouchableOpacity/index'>,
    TouchableWithoutFeedback: $Exports<'react-native-web/dist/exports/TouchableWithoutFeedback/index'>,
    UIManager: $Exports<'react-native-web/dist/exports/UIManager/index'>,
    View: $Exports<'react-native-web/dist/exports/View/index'>,
    ViewPropTypes: $Exports<'react-native-web/dist/exports/ViewPropTypes/index'>
  };
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'react-native-web/dist/exports/ActivityIndicator/index' {
  declare type ActivityIndicatorProps = ViewProps & {
    animating?: boolean,
    color?: string,
    hidesWhenStopped?: boolean,
    size?: 'small' | 'large' | number
  };
  declare module.exports: React$ComponentType<ActivityIndicatorProps>;
}

declare module 'react-native-web/dist/exports/Animated/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/AppRegistry/AppContainer' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/AppRegistry/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/AppRegistry/renderApplication' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/AppState/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ART/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/AsyncStorage/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/BackHandler/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Button/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/CheckBox/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Clipboard/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ColorPropType/index' {
  declare module.exports: string;
}

declare module 'react-native-web/dist/exports/createElement/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Dimensions/index' {
  declare class Dimensions {
    static get(dimension: 'window' | 'screen'): {| width: number, height: number |};
    static set(initialDimensions: ?{ [key: string]: any }): void;

    static addEventListener(type: 'change', callback: ({| window: $Dimension, screen: $Dimension |}) => void): void;
    static removeEventListener(type: 'change', callback: ({| window: $Dimension, screen: $Dimension |}) => void): void;
  }

  declare module.exports: typeof Dimensions;
}

declare module 'react-native-web/dist/exports/Easing/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/EdgeInsetsPropType/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/findNodeHandle/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/FlatList/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/I18nManager/index' {
  declare module.exports: {
    isRTL: boolean,
    allowRTL(allowRTL: boolean): void,
    forceRTL(forceRTL: boolean): void,
    setPreferredLanguageRTL(isRTL: boolean): void
  };
}

declare module 'react-native-web/dist/exports/Image/ImageResizeMode' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Image/ImageStylePropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Image/ImageUriCache' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Image/index' {
  declare type Props = ViewProps & {
    defaultSource?: { uri: string, width: number, height: number },
    draggable?: boolean,
    onError?: () => void,
    onLoad?: () => void,
    onLoadEnd?: () => void,
    onLoadStart?: () => void,
    resizeMode?: 'center' | 'contain' | 'cover' | 'none' | 'repeat' | 'stretch',
    source?: string | {| uri: string, width?: number, height?: number |},
    style?: Styles
  };

  declare class Image<Props, State = void> extends React$Component<Props, State> {
    getSize: (uri: string, success: (width: number, height: number) => {}, failure: () => void) => void;
    prefetch: (url: string) => Promise<void>;
  }
  declare module.exports: typeof Image;
}

declare module 'react-native-web/dist/exports/ImageBackground/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/InteractionManager/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Keyboard/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/KeyboardAvoidingView/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Linking/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ListView/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ListView/ListViewDataSource' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ListView/ListViewPropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Modal/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/NativeModules/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/NetInfo/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/PanResponder/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Picker/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Picker/PickerItem' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Picker/PickerItemPropType' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Picker/PickerStylePropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/PixelRatio/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Platform/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/PointPropType/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/processColor/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ProgressBar/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/RefreshControl/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/render/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/SafeAreaView/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ScrollView/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ScrollView/ScrollViewBase' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/SectionList/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Slider/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StatusBar/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/createReactDOMStyle' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/flattenStyle' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/generateCss' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/getHairlineWidth' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/i18nStyle' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/index' {
  declare type $StylesDefinition = { [key: string]: $Styles };
  declare interface StyleSheet {
    absoluteFill: $Styles;
    absoluteFillObject: $Styles;
    create(styles: $StylesDefinition): $StylesDefinition;
    hairlineWidth: number;
  }
  declare module.exports: StyleSheet;
}

declare module 'react-native-web/dist/exports/StyleSheet/normalizeValue' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/registry' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/staticCss' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/StyleManager' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/StyleRegistry' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/StyleSheet/StyleSheetValidation' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Switch/index' {
  declare type SwitchProps = ViewProps & {
    activeThumbColor?: string,
    activeTrackOColor?: string,
    disabled?: boolean,
    onTintColor?: string,
    onValueChange?: (value: boolean) => void,
    thumbColor?: string,
    trackColor?: string,
    value?: boolean,
    tintColor?: string,
    thumbTintColor?: string
  };
  declare class Switch<SwitchProps, State = void> extends React$Component<SwitchProps, State> {
    static propTypes: {};
    static defaultProps: {
      activeThumbColor: '#009588',
      activeTrackColor: '#A3D3CF',
      disabled: false,
      thumbColor: '#FAFAFA',
      trackColor: '#939393',
      value: false
    };
  }
  declare module.exports: typeof Switch;
}

declare module 'react-native-web/dist/exports/Text/index' {
  declare type TextProps = {
    accessibilityLabel?: string,
    accessibilityLiveRegion?: 'assertive' | 'none' | 'polite',
    accessibilityRole?: string,
    accessible?: boolean,
    children?: React$Node,
    importantForAccessibility?: 'auto' | 'no' | 'no-hide-descendents' | 'yes',
    numberOfLines?: number,
    onLayout?: () => void,
    onPress?: () => void,
    selectable?: boolean,
    style?: Styles,
    testID?: string
  };
  declare class Text<TextProps, State = void> extends React$Component<TextProps, State> {
    setNativeProps: (nativeProps: {}) => void;
  }
  declare module.exports: typeof Text;
}

declare module 'react-native-web/dist/exports/Text/TextPropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Text/TextStylePropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/TextInput/index' {
  declare type TextInputProps = ViewProps & {
    autoCapitalize?: 'characters' | 'none' | 'sentences' | 'words',
    autoComplete?: 'string',
    autoCorrect?: boolean,
    autoFocus?: boolean,
    blurOnSubmit?: boolean,
    clearTextOnFocus?: boolean,
    defaultValue?: string,
    editable?: boolean,
    keyboardType?: 'default' | 'email-address' | 'numeric' | 'phone-pad' | 'search' | 'url' | 'web-search',
    maxLength?: number,
    multiline?: boolean,
    numberOfLines?: number,
    onBlur?: () => void,
    onChange?: () => void,
    onChangeText?: () => void,
    onFocus?: () => void,
    onKeyPress?: () => void,
    onLayout?: () => void,
    onSelectionChange?: () => void,
    onSubmitEditing?: () => void,
    placeholder?: string,
    placeholderTextColor?: string,
    secureTextEntry?: boolean,
    selection?: {| start: number, end?: number |},
    selectTextOnFocus?: boolean,
    spellCheck?: boolean,
    style?: Styles,
    value?: string
  };

  declare class TextInput<TextInputProps, State = void> extends React$Component<TextInputProps, State> {
    blur: () => void;
    clear: () => void;
    focus: () => void;
    isFocused: () => boolean;
  }
  declare module.exports: typeof TextInput;
}

declare module 'react-native-web/dist/exports/TextInput/TextInputStylePropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/TextPropTypes/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Touchable/BoundingDimensions' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Touchable/ensurePositiveDelayProps' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Touchable/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Touchable/Position' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/TouchableHighlight/index' {
  declare type TouchableWithoutFeedback = $Exports<'react-native-web/dist/exports/TouchableWithoutFeedback/index'>;
  declare type Props = React$ElementConfig<TouchableWithoutFeedback> & {
    activeOpacity?: number,
    onHideUnderlay?: () => void,
    onShowUnderlay?: () => void,
    underlayColor?: string
  };
  declare class TouchableHighlight extends React$Component<Props> {
    setOpacityTo(value: number, duration: number): void;
  }
  declare module.exports: typeof TouchableHighlight;
}

declare module 'react-native-web/dist/exports/TouchableNativeFeedback/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/TouchableOpacity/index' {
  declare type TouchableWithoutFeedback = $Exports<'react-native-web/dist/exports/TouchableWithoutFeedback/index'>;
  declare type Props = React$ElementConfig<TouchableWithoutFeedback> & {
    activeOpacity?: number,
    focusedOpacity?: number
  };
  declare class TouchableOpacity extends React$Component<Props> {
    setOpacityTo(value: number, duration: number): void;
  }
  declare module.exports: typeof TouchableOpacity;
}

declare module 'react-native-web/dist/exports/TouchableWithoutFeedback/index' {
  declare type Props = ViewProps & {
    delayLongPress?: number,
    delayPressIn?: number,
    delayPressOut?: number,
    disabled?: boolean,
    onLongPress?: () => void,
    onPress?: () => void,
    onPressIn?: () => void,
    onPressOut?: () => void,
    pressRetentionOffset?: { top: number, left: number, bottom: number, right: number }
  };
  declare module.exports: React$ComponentType<Props>;
}

declare module 'react-native-web/dist/exports/UIManager/index' {
  declare interface UIManager {
    blur(node: HTMLElement): void;
    focus(node: HTMLElement): void;
    measure(node: mixed, callback: $MeasureLayoutCallback): void;
    measureInWindow(node: mixed, callback: $MeasureInWindowCallback): void;
    measureLayout(node: mixed, relativeToNativeNode: mixed, onFail: any, onSuccess: $MeasureLayoutCallback): void;
    updateView(node: mixed, props: {}, component: any): void;
  }
  declare module.exports: UIManager;
}

declare module 'react-native-web/dist/exports/unmountComponentAtNode/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/Vibration/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/View/index' {
  // NativeMethodsMixin statics are copied directly because `mixins NativeMethodsMixin` doesn't work
  declare class View<ViewProps, State = void> extends React$Component<ViewProps, State> {
    blur: () => void;
    focus: () => void;
    measure: (callback: $MeasureLayoutCallback) => void;
    measureInWindow: (callback: $MeasureInWindowCallback) => void;
    measureLayout: (relativeToNativeNode: {}, onSuccess: $MeasureLayoutCallback, onFail: () => void) => void;
    setNativeProps: (nativeProps: {}) => void;
  }
  declare module.exports: typeof View;
}

declare module 'react-native-web/dist/exports/View/ViewPropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/View/ViewStylePropTypes' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/exports/ViewPropTypes/index' {
  declare module.exports: ViewProps;
}

declare module 'react-native-web/dist/exports/VirtualizedList/index' {
  declare module.exports: any;
}

declare module 'react-native-web/dist/index' {
  declare module.exports: any;
}
